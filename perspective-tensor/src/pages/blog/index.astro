---
import BaseLayout from '../../layouts/BaseLayout.astro';
import StructuredData from '../../components/StructuredData.astro';
import Tag from '../../components/Tag.astro';
import { getCollection } from 'astro:content';

// Get all posts from all collections
const blogPosts = await getCollection('blog', ({ data }) => data.draft !== true);
const codePosts = await getCollection('code', ({ data }) => data.draft !== true);
const growthPosts = await getCollection('growth', ({ data }) => data.draft !== true);

// Combine all posts
const allPosts = [
  ...blogPosts.map(post => ({ ...post, collection: 'blog', section: post.data.section || 'thoughts' })),
  ...codePosts.map(post => ({ ...post, collection: 'code', section: post.data.section || 'code' })),
  ...growthPosts.map(post => ({ ...post, collection: 'growth', section: post.data.section || 'growth' }))
];

// Sort by date (newest first)
allPosts.sort((a, b) => {
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

// Extract all unique tags
const allTags = new Set<string>();
allPosts.forEach(post => {
  if ('tags' in post.data && post.data.tags) {
    post.data.tags.forEach((tag: string) => allTags.add(tag));
  }
});

// Structured data
const blogData = {
  "@type": "Blog",
  name: "Perspective Tensor Blog",
  description: "Exploring AI, machine learning, complexity, and human growth",
  url: "https://perspective-tensor.dev/blog",
  author: {
    "@type": "Person",
    name: "Lin Wang",
    url: "https://perspective-tensor.dev"
  }
};
---

<BaseLayout 
  title="Blog" 
  description="Exploring AI, machine learning, complexity, and human growth through multiple perspectives."
>
  <StructuredData type="Blog" data={blogData} />
  
  <div class="mx-auto px-4">
    <!-- Header -->
    <header class="mb-12">
      <div class="flex items-center gap-3 mb-6">
        <a 
          href="/"
          class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors font-light"
          data-astro-history="push"
        >
          Home
        </a>
        <span class="text-gray-400 dark:text-gray-600">/</span>
        <span class="text-sm text-gray-900 dark:text-gray-100 font-light">Blog</span>
      </div>
      
      <p class="text-base text-gray-600 dark:text-gray-400 font-light max-w-2xl">
        Exploring the intersection of machine intelligence, system design, and human complexity.
      </p>
    </header>
    
    <!-- Filters -->
    <div class="mb-12">
      <!-- Main Categories -->
      <div class="flex items-center gap-6 mb-8">
        <button 
          data-filter-section="all"
          class="filter-section text-base font-light transition-all duration-300 border-b-2 border-gray-900 text-gray-900 dark:border-gray-100 dark:text-gray-100 pb-1"
        >
          All
        </button>
        <button 
          data-filter-section="thoughts"
          class="filter-section text-base font-light transition-all duration-300 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 pb-1 border-b-2 border-transparent hover:border-gray-300 dark:hover:border-gray-600"
        >
          Thoughts
        </button>
        <button 
          data-filter-section="code"
          class="filter-section text-base font-light transition-all duration-300 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 pb-1 border-b-2 border-transparent hover:border-gray-300 dark:hover:border-gray-600"
        >
          Code
        </button>
        <button 
          data-filter-section="growth"
          class="filter-section text-base font-light transition-all duration-300 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 pb-1 border-b-2 border-transparent hover:border-gray-300 dark:hover:border-gray-600"
        >
          Growth
        </button>
      </div>
      
      <!-- Tag Filter -->
      <div class="flex flex-wrap items-center gap-1.5">
        <button 
          data-filter-tag="all"
          class="filter-tag text-xs px-2 py-0.5 rounded-full transition-all duration-200 bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900 subpixel-antialiased"
        >
          all
        </button>
        {Array.from(allTags).sort().map(tag => (
          <button 
            data-filter-tag={tag}
            class="filter-tag text-xs px-2 py-0.5 rounded-full transition-all duration-200 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:bg-gray-800 subpixel-antialiased"
          >
            {tag}
          </button>
        ))}
      </div>
    </div>
    
    <!-- Posts with stacked card effect -->
    <div class="posts-stack relative overflow-visible" id="posts-container">
      {allPosts.length === 0 ? (
        <div class="text-center py-16">
          <p class="text-gray-500 dark:text-gray-400 font-light mb-4">
            No posts yet. Check back soon for insights and explorations.
          </p>
        </div>
      ) : (
        allPosts.map((post) => {
          // Determine URL based on collection
          const postUrl = post.collection === 'blog' ? `/blog/${post.id}` :
                         post.collection === 'code' ? `/code/${post.id}` :
                         `/growth/${post.id}`;
          
          // Consistent neutral border for all cards
          const borderStyle = 'border-gray-200 dark:border-gray-700';
          
          return (
            <article 
              class="post-card"
              data-section={post.section}
              data-tags={'tags' in post.data ? post.data.tags?.join(',') : ''}
            >
              <div class="card-inner">
                <a 
                  href={postUrl}
                  class={`block px-6 pt-4 pb-5 rounded-lg border shadow-sm hover:shadow-lg transition-all duration-500 h-[180px] flex flex-col relative ${borderStyle} bg-white dark:bg-gray-800`}
                  data-astro-history="push"
                >
                <!-- Category bookmark tab -->
                <div class={`absolute -right-20 bottom-16 w-24 h-6 flex items-center justify-end pr-3 text-xs font-medium text-gray-700 dark:text-gray-300 subpixel-antialiased rounded-r-md shadow-sm ${
                  post.section === 'thoughts' ? 'bg-gray-100 dark:bg-gray-700 border-gray-200 dark:border-gray-600' :
                  post.section === 'code' ? 'bg-blue-50 dark:bg-blue-900 border-blue-200 dark:border-blue-700' :
                  post.section === 'growth' ? 'bg-green-50 dark:bg-green-900 border-green-200 dark:border-green-700' :
                  'bg-gray-100 dark:bg-gray-700 border-gray-200 dark:border-gray-600'
                } border border-l-0`} style="z-index: 10;">
                  {post.section}
                </div>
                
                <div class="flex-1 flex flex-col">
                  <h2 class="text-xl font-light text-gray-950 dark:text-gray-50 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors mb-2">
                    {post.data.title || post.id}
                  </h2>
                  {post.data.description && (
                    <p class="text-sm text-gray-700 dark:text-gray-300 font-light leading-relaxed line-clamp-2 mb-3">
                      {post.data.description}
                    </p>
                  )}
                </div>
                
                <div class="flex items-end justify-between">
                  <div class="flex flex-wrap gap-1.5">
                    {'tags' in post.data && post.data.tags && post.data.tags.map((tag: string) => (
                      <Tag text={tag} />
                    ))}
                  </div>
                  {post.data.pubDate && (
                    <time 
                      class="text-xs text-gray-500 dark:text-gray-400 font-light ml-3 flex-shrink-0" 
                      datetime={post.data.pubDate.toISOString()}
                    >
                      {post.data.pubDate.toLocaleDateString('en-US', { 
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </time>
                  )}
                </div>
              </a>
              </div>
            </article>
          );
        })
      )}
    </div>
  </div>
  
  <style>
    /* Elegant stacked cards */
    .posts-stack {
      position: relative;
      min-height: 600px;
      margin-top: 2rem;
      padding-bottom: 2rem;
    }
    
    .post-card {
      position: absolute;
      width: calc(100% - 80px); /* Make room for bookmark tabs */
      cursor: pointer;
      /* Dynamic positioning set via JS */
    }
    
    /* Simple card animation - float to center */
    .card-inner {
      position: relative;
      width: 100%;
      transition: transform 0.3s ease-out;
      /* Advanced blur fix techniques */
      transform: perspective(1px) translateZ(0);
      backface-visibility: hidden;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      transform-origin: 50% 50%;
    }
    
    /* Hovered card floats up and centers - no scale to avoid blur */
    .post-card.active .card-inner {
      transform: perspective(1px) translateY(-15px) translateZ(0);
    }
    
    /* Background cards stay completely unchanged */
    
    /* Improve text rendering */
    .post-card {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeLegibility;
    }
    
    /* Clean dark mode support now handled by Tailwind classes */
    
    /* Z-index management */
    .post-card {
      z-index: var(--z-index, 1);
    }
    
    .post-card.active {
      z-index: 100 !important;
    }
    
    /* Enhanced shadow during pull - consistent across themes */
    .post-card .card-inner > a {
      transition: box-shadow 0.4s ease-out, 
                  border-color 0.35s ease-out,
                  background-color 0.25s ease-out;
    }
    
    .post-card:hover .card-inner > a {
      box-shadow: 
        -8px 15px 35px -8px rgba(0, 0, 0, 0.15),
        0 0 0 1px rgba(59, 130, 246, 0.2);
      border-color: rgb(59, 130, 246, 0.4) !important;
    }
    
    .dark .post-card:hover .card-inner > a {
      box-shadow: 
        -8px 15px 35px -8px rgba(0, 0, 0, 0.15),
        0 0 0 1px rgba(59, 130, 246, 0.2);
      border-color: rgb(59, 130, 246, 0.4) !important;
    }
    
    /* Smooth transition for hidden cards */
    .post-card[style*="display: none"] {
      transform: translateX(50px) scale(0.95);
      opacity: 0;
      pointer-events: none;
    }
    
    /* Add perspective to container for 3D effect */
    .posts-stack {
      perspective: 1000px;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .post-card:hover {
        transform: translateY(-15px) scale(1.02) rotate(-0.5deg);
      }
      
      .post-card.pushed-up {
        transform: translateY(-10px) scale(0.99);
      }
      
      .post-card.pushed-down {
        transform: translateY(10px) scale(0.99);
      }
    }
  </style>
  
  <script>
    // Filter functionality with stacked cards
    document.addEventListener('DOMContentLoaded', () => {
      const posts = document.querySelectorAll<HTMLElement>('.post-card');
      const sectionButtons = document.querySelectorAll<HTMLButtonElement>('.filter-section');
      const tagButtons = document.querySelectorAll<HTMLButtonElement>('.filter-tag');
      const container = document.getElementById('posts-container');
      
      let currentSection = 'all';
      let currentTag = 'all';
      let currentVisiblePosts: HTMLElement[] = [];
      let debounceTimeout: number | null = null;
      let leaveTimeout: number | null = null;
      
      function setActiveCard(activePost: HTMLElement | null) {
        // Remove active from all posts
        currentVisiblePosts.forEach(post => post.classList.remove('active'));
        
        if (activePost) {
          // Add active to hovered post and has-active to container
          activePost.classList.add('active');
          container?.classList.add('has-active');
        } else {
          // Remove has-active from container
          container?.classList.remove('has-active');
        }
      }
      
      // Add hover interactions with longer debounce to prevent effects during quick movement
      posts.forEach(post => {
        post.addEventListener('mouseenter', function() {
          // Clear any pending leave timeout
          if (leaveTimeout) {
            clearTimeout(leaveTimeout);
            leaveTimeout = null;
          }
          
          // Clear debounce timeout
          if (debounceTimeout) {
            clearTimeout(debounceTimeout);
          }
          
          // Longer debounce delay - only activate if mouse stays for a bit
          debounceTimeout = setTimeout(() => {
            setActiveCard(post);
            debounceTimeout = null;
          }, 200) as unknown as number; // Increased from 50ms to 200ms
        });
        
        post.addEventListener('mouseleave', function() {
          // Clear debounce timeout on leave
          if (debounceTimeout) {
            clearTimeout(debounceTimeout);
            debounceTimeout = null;
          }
          
          // Immediate deactivation when leaving
          setActiveCard(null);
        });
      });
      
      function repositionCards() {
        currentVisiblePosts = []; // Clear and rebuild the visible posts array
        
        posts.forEach(post => {
          const postSection = post.getAttribute('data-section');
          const postTags = post.getAttribute('data-tags')?.split(',') || [];
          
          const sectionMatch = currentSection === 'all' || postSection === currentSection;
          const tagMatch = currentTag === 'all' || postTags.includes(currentTag);
          
          if (sectionMatch && tagMatch) {
            currentVisiblePosts.push(post);
            post.style.display = 'block';
          } else {
            post.style.display = 'none';
          }
          post.classList.remove('active'); // Reset active state
        });
        
        // Calculate optimal overlap to show the tags centered between cards
        const cardHeight = 180;
        const tagAreaHeight = 70; // Show tags area prominently
        const overlap = tagAreaHeight;
        
        // Position visible cards with stacking
        currentVisiblePosts.forEach((post, index) => {
          post.style.top = `${index * overlap}px`;
          post.style.setProperty('--z-index', (50 - index).toString()); // Higher z-index for top cards
        });
        
        // Update container height based on visible posts
        const totalHeight = Math.max(600, (currentVisiblePosts.length - 1) * overlap + cardHeight + 80);
        if (container) {
          container.style.minHeight = `${totalHeight}px`;
          container.classList.remove('has-active'); // Reset active state
        }
      }
      
      // Initial positioning
      repositionCards();
      
      // Section filter
      sectionButtons.forEach(button => {
        button.addEventListener('click', () => {
          currentSection = button.getAttribute('data-filter-section');
          
          // Update button styles
          sectionButtons.forEach(btn => {
            if (btn === button) {
              btn.classList.add('border-gray-900', 'text-gray-900', 'dark:border-gray-100', 'dark:text-gray-100');
              btn.classList.remove('text-gray-500', 'hover:text-gray-900', 'dark:text-gray-400', 'dark:hover:text-gray-100', 'border-transparent', 'hover:border-gray-300', 'dark:hover:border-gray-600');
            } else {
              btn.classList.remove('border-gray-900', 'text-gray-900', 'dark:border-gray-100', 'dark:text-gray-100');
              btn.classList.add('text-gray-500', 'hover:text-gray-900', 'dark:text-gray-400', 'dark:hover:text-gray-100', 'border-transparent', 'hover:border-gray-300', 'dark:hover:border-gray-600');
            }
          });
          
          repositionCards();
        });
      });
      
      // Tag filter
      tagButtons.forEach(button => {
        button.addEventListener('click', () => {
          const clickedTag = button.getAttribute('data-filter-tag');
          
          // If clicking the same tag, reset to "all"
          if (currentTag === clickedTag && clickedTag !== 'all') {
            currentTag = 'all';
          } else {
            currentTag = clickedTag;
          }
          
          // Update button styles
          tagButtons.forEach(btn => {
            const btnTag = btn.getAttribute('data-filter-tag');
            if (btnTag === currentTag) {
              btn.classList.add('bg-gray-900', 'text-white', 'dark:bg-gray-100', 'dark:text-gray-900');
              btn.classList.remove('text-gray-500', 'hover:text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-400', 'dark:hover:text-gray-300', 'dark:hover:bg-gray-800');
            } else {
              btn.classList.remove('bg-gray-900', 'text-white', 'dark:bg-gray-100', 'dark:text-gray-900');
              btn.classList.add('text-gray-500', 'hover:text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-400', 'dark:hover:text-gray-300', 'dark:hover:bg-gray-800');
            }
          });
          
          repositionCards();
        });
      });
    });
  </script>
</BaseLayout>