---
import BaseLayout from '../layouts/BaseLayout.astro';
import StructuredData from '../components/StructuredData.astro';
import SimplifiedNetworkCanvas from '../react/SimplifiedNetworkCanvas.tsx';
import { getCollection } from 'astro:content';

const posts = await getCollection('blog', ({ data }) => data.draft !== true);

// Sort posts by date (newest first)
posts.sort((a, b) => {
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

const websiteData = {
  name: "Perspective Tensor",
  description: "Personal blog exploring AI, machine learning, complexity theory, and data science through a first principles lens.",
  url: "https://perspective-tensor.dev",
  author: {
    "@type": "Person",
    name: "Lin Wang",
    url: "https://perspective-tensor.dev"
  },
  potentialAction: {
    "@type": "SearchAction",
    target: "https://perspective-tensor.dev/search?q={search_term_string}",
    "query-input": "required name=search_term_string"
  }
};
---
<BaseLayout title="Home">
  <StructuredData type="WebSite" data={websiteData} />
  <div class="py-12 md:py-16 text-center max-w-3xl mx-auto px-4">
    <section class="mb-6" transition:name="hero" transition:animate="fade">
      <SimplifiedNetworkCanvas client:load />
    </section>
    <div>
      <p class="text-base md:text-lg text-gray-500 dark:text-gray-400 leading-relaxed max-w-2xl mx-auto font-light tracking-wide">
        Exploring <em class="text-gray-700 dark:text-gray-200 font-medium not-italic">machine learning</em>, <em class="text-gray-700 dark:text-gray-200 font-medium not-italic">complexity theory</em>, and <em class="text-gray-700 dark:text-gray-200 font-medium not-italic">human centricity</em> through first principles thinking.
      </p>
      
      <!-- Prominent blog navigation dropdown -->
      <div class="mt-12 text-center">
        <div class="blog-dropdown group relative inline-block">
          <div class="inline-flex items-center text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-200">
            <button 
              class="blog-trigger tracking-wide hover:text-gray-900 dark:hover:text-gray-100 transition-colors cursor-pointer"
              aria-expanded="false"
              aria-haspopup="true"
            >
              Read my latest insights
            </button>
            <svg class="ml-3 w-5 h-5 transition-transform group-hover:-translate-y-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
            </svg>
          </div>
          
          <!-- Dropdown menu -->
          <div class="blog-menu absolute bottom-full left-1/2 -translate-x-1/2 mb-4 w-[32rem] max-w-[calc(100vw-2rem)] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-lg opacity-0 invisible translate-y-2 origin-bottom scale-95 transition-opacity transition-transform duration-300 ease-out transform-gpu z-10">
            <div class="p-4">
              <div class="text-xs font-medium text-gray-400 dark:text-gray-500 mb-3 tracking-wider uppercase">
                Recent Posts
              </div>
              <div class="space-y-2 max-h-80 overflow-y-auto">
                {posts.slice(0, 8).map(post => (
                  <a 
                    href={`/blog/${post.id}`}
                    class="block p-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors group"
                    data-astro-history="push"
                  >
                    <div class="flex items-start justify-between gap-4">
                      <div class="flex-1 min-w-0">
                        <h3 class="font-medium text-gray-900 dark:text-gray-100 text-sm mb-2 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors leading-snug">
                          {post.data.title || post.id}
                        </h3>
                        {post.data.description && (
                          <p class="text-xs text-gray-500 dark:text-gray-400 line-clamp-2 leading-relaxed">
                            {post.data.description}
                          </p>
                        )}
                      </div>
                      {post.data.pubDate && (
                        <time class="text-xs text-gray-400 dark:text-gray-500 whitespace-nowrap">
                          {post.data.pubDate.toLocaleDateString('en-US', { 
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </time>
                      )}
                    </div>
                  </a>
                ))}
              </div>
              <div class="mt-4 pt-3 border-t border-gray-100 dark:border-gray-700">
                <a 
                  href="/blog"
                  class="block text-center text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
                  data-astro-history="push"
                >
                  View all posts â†’
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* JS controls visibility/transform; remove hover rules to avoid fighting transitions */
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dropdown = document.querySelector('.blog-dropdown');
    const trigger = document.querySelector('.blog-trigger');
    const menu = document.querySelector('.blog-menu');
    
    if (!dropdown || !trigger || !menu) return;
    
    let timeoutId: number; // hide delay
    let showTimeoutId: number; // show delay for hover intent
    
    const showMenu = () => {
      clearTimeout(timeoutId);
      clearTimeout(showTimeoutId);
      menu.classList.remove('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
      menu.classList.add('opacity-100', 'visible', 'translate-y-0', 'scale-100');
      trigger.setAttribute('aria-expanded', 'true');
    };
    
    const hideMenu = () => {
      timeoutId = window.setTimeout(() => {
        menu.classList.add('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
        menu.classList.remove('opacity-100', 'visible', 'translate-y-0', 'scale-100');
        trigger.setAttribute('aria-expanded', 'false');
      }, 150);
    };
    
    const scheduleShow = () => {
      clearTimeout(timeoutId);
      clearTimeout(showTimeoutId);
      showTimeoutId = window.setTimeout(() => {
        showMenu();
      }, 180); // small hover-intent delay
    };
    
    // Mouse events
    dropdown.addEventListener('mouseenter', scheduleShow);
    dropdown.addEventListener('mouseleave', () => {
      clearTimeout(showTimeoutId);
      hideMenu();
    });
    
    // Touch/click support for mobile
    trigger.addEventListener('click', (e) => {
      e.preventDefault();
      clearTimeout(timeoutId);
      clearTimeout(showTimeoutId);
      if (menu.classList.contains('opacity-0')) {
        showMenu();
      } else {
        hideMenu();
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!dropdown.contains(e.target as Node)) {
        hideMenu();
      }
    });
    
    // Keyboard navigation
    trigger.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        showMenu();
        // Focus first link in dropdown
        const firstLink = menu.querySelector('a');
        if (firstLink) firstLink.focus();
      } else if (e.key === 'Escape') {
        hideMenu();
      }
    });
  });
</script>
