---
import BaseLayout from '../layouts/BaseLayout.astro';
import StructuredData from '../components/StructuredData.astro';
import AnimationCanvas from '../react/components/AnimationCanvasNew.tsx';
import { getCollection } from 'astro:content';

const posts = await getCollection('blog', ({ data }) => data.draft !== true);

// Sort posts by date (newest first)
posts.sort((a, b) => {
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

const websiteData = {
  name: "Perspective Tensor",
  description: "Exploring the intersection of AI/ML systems, human complexity, and career growth. Join me in discovering patterns that connect technology, people, and purpose.",
  url: "https://perspective-tensor.dev",
  author: {
    "@type": "Person",
    name: "Lin Wang",
    url: "https://perspective-tensor.dev"
  },
  potentialAction: {
    "@type": "SearchAction",
    target: "https://perspective-tensor.dev/search?q={search_term_string}",
    "query-input": "required name=search_term_string"
  }
};
---
<BaseLayout title="Home">
  <StructuredData type="WebSite" data={websiteData} />
  <div class="relative flex items-center justify-center min-h-[calc(100vh-12rem)] h-[calc(100vh-12rem)] w-full">
    <!-- Layer 1: Canvas (base rendering layer) -->
    <div class="relative w-full h-full" id="canvas-container">
      <AnimationCanvas client:load />
      
      <!-- Layer 2: Gradient blend screen (same size/position as canvas) -->
      <div class="absolute inset-0 pointer-events-none z-10 dark:hidden" style="background: radial-gradient(ellipse at center, transparent 0%, transparent 55%, rgba(255,255,255,0.1) 60%, rgba(255,255,255,0.2) 65%, rgba(255,255,255,0.4) 70%, rgba(255,255,255,0.6) 75%, rgba(255,255,255,0.8) 80%, rgba(255,255,255,0.95) 85%, rgba(255,255,255,1) 90%, rgba(255,255,255,1) 95%, rgba(255,255,255,1) 100%);"></div>
      <!-- Dark mode gradient blend -->
      <div class="absolute inset-0 pointer-events-none z-10 hidden dark:block" style="background: radial-gradient(ellipse at center, transparent 0%, transparent 55%, rgba(17,24,39,0.1) 60%, rgba(17,24,39,0.2) 65%, rgba(17,24,39,0.4) 70%, rgba(17,24,39,0.6) 75%, rgba(17,24,39,0.8) 80%, rgba(17,24,39,0.95) 85%, rgba(17,24,39,1) 90%, rgba(17,24,39,1) 95%, rgba(17,24,39,1) 100%);"></div>
      
      <!-- Interactive trigger for tooltip (covers canvas only) -->
      <div class="absolute inset-0 cursor-pointer z-20" id="canvas-trigger">
        <div id="mouse-tooltip" class="fixed opacity-0 transition-opacity duration-500 ease-out pointer-events-none z-40">
          <div class="bg-white/5 dark:bg-gray-900/10 backdrop-blur-lg border border-gray-200/10 dark:border-gray-600/10 rounded-xl px-3 py-1.5 shadow-2xl ml-3">
            <div class="text-sm font-light text-gray-700 dark:text-gray-300 tracking-wide whitespace-nowrap">
              <span id="typewriter-text"></span><span class="typewriter-cursor">|</span>
            </div>
          </div>
          <div class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1 w-0 h-0 border-t-2 border-b-2 border-r-2 border-t-transparent border-b-transparent border-r-white/5 dark:border-r-gray-900/10"></div>
        </div>
      </div>
    </div>
    
    <!-- Layer 3: Floating text (positioned independently, above blend screen) -->
    <div class="absolute bottom-12 md:bottom-16 lg:bottom-20 left-8 right-8 md:left-12 md:right-12 lg:left-16 lg:right-16 flex flex-col items-center pointer-events-none z-30">
      <p class="text-lg md:text-xl lg:text-2xl text-blue-900 dark:text-blue-400 font-light leading-loose tracking-wider text-center animate-fade-in-up animate-breathe bg-white/10 dark:bg-gray-900/30 backdrop-blur-sm rounded-lg max-w-4xl mx-4 mb-4" style="font-family: 'Times New Roman', 'Georgia', 'serif'; font-variation-settings: 'wght' 300;">
        Journey through the intersections of minds, machines, and purpose.
      </p>
      {posts.length > 0 && (
        <a href={`/blog/${posts[0].id}`} 
           class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300 pointer-events-auto font-light tracking-wide opacity-70 hover:opacity-100"
           data-astro-history="push">
          Recent exploration â†’ {posts[0].data.title}
        </a>
      )}
    </div>
    
    <!-- Layer 4: Floating footer (if needed - placeholder for future) -->
    <!-- <div class="absolute bottom-4 left-4 right-4 flex justify-center pointer-events-none">
      <div class="text-xs text-gray-500 dark:text-gray-400">Footer content</div>
    </div> -->
    <style>
        @keyframes fadeInUp {
          0% {
            opacity: 0;
            transform: translateY(20px);
          }
          100% {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-fade-in-up {
          animation: fadeInUp 2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
          animation-delay: 0.5s;
          opacity: 0;
        }
        
        .typewriter-cursor {
          animation: blink 1s infinite;
          opacity: 1;
        }
        
        @keyframes blink {
          0%, 50% { opacity: 1; }
          51%, 100% { opacity: 0; }
        }
        
        @keyframes breathe {
          0%, 100% { 
            opacity: 0.8; 
            transform: scale(1); 
          }
          50% { 
            opacity: 1; 
            transform: scale(1.02); 
          }
        }
        
        .animate-breathe {
          animation: breathe 8s ease-in-out infinite;
        }
      </style>
      
      <script>
        let tooltipInitialized = false;
        let typewriterTimeout: number;
        let currentTypewriterIndex = 0;
        let movementTimeout: number;
        let isMoving = false;
        
        function initializeTooltip() {
          // Prevent duplicate initialization
          if (tooltipInitialized) return;
          
          const canvasTrigger = document.getElementById('canvas-trigger');
          const tooltip = document.getElementById('mouse-tooltip');
          const typewriterText = document.getElementById('typewriter-text');
          const fullText = "Let's explore...";
          
          if (canvasTrigger && tooltip && typewriterText) {
            tooltipInitialized = true;
            let isHovering = false;
            
            // Typewriter effect function
            function startTypewriter() {
              typewriterText.textContent = '';
              currentTypewriterIndex = 0;
              
              function typeNextChar() {
                if (currentTypewriterIndex < fullText.length && isHovering && !isMoving) {
                  const char = fullText[currentTypewriterIndex];
                  typewriterText.textContent += char;
                  currentTypewriterIndex++;
                  
                  // Variable typing speed for natural feel
                  let delay = 45; // Base typing speed
                  
                  // Longer pauses for punctuation and spaces
                  if (char === ',' || char === '.') {
                    delay = 120 + Math.random() * 100; // 120-220ms pause after punctuation
                  } else if (char === ' ') {
                    delay = 80 + Math.random() * 40; // 80-120ms pause after spaces
                  } else if (char === "'") {
                    delay = 30 + Math.random() * 20; // Slightly faster for apostrophes
                  } else {
                    // Add slight randomness to regular characters
                    delay = 35 + Math.random() * 25; // 35-60ms for natural variation
                  }
                  
                  typewriterTimeout = setTimeout(typeNextChar, delay);
                }
              }
              
              // Start typing after a brief delay
              typewriterTimeout = setTimeout(typeNextChar, 200);
            }
            
            // Show tooltip and start tracking mouse
            canvasTrigger.addEventListener('mouseenter', function(e) {
              isHovering = true;
              if (!isMoving) {
                tooltip.classList.remove('opacity-0');
                tooltip.classList.add('opacity-100');
                updateTooltipPosition(e);
                startTypewriter();
              }
            });
            
            // Hide tooltip and stop typewriter
            canvasTrigger.addEventListener('mouseleave', function() {
              isHovering = false;
              tooltip.classList.remove('opacity-100');
              tooltip.classList.add('opacity-0');
              clearTimeout(typewriterTimeout);
              clearTimeout(movementTimeout);
              typewriterText.textContent = '';
              currentTypewriterIndex = 0;
              isMoving = false;
            });
            
            // Track mouse movement with movement detection
            let animationFrameId: number;
            canvasTrigger.addEventListener('mousemove', function(e) {
              if (isHovering) {
                // Hide tooltip immediately when mouse moves
                if (!isMoving) {
                  isMoving = true;
                  tooltip.classList.remove('opacity-100');
                  tooltip.classList.add('opacity-0');
                  clearTimeout(typewriterTimeout);
                }
                
                // Clear previous movement timeout
                clearTimeout(movementTimeout);
                
                // Cancel previous frame
                if (animationFrameId) {
                  cancelAnimationFrame(animationFrameId);
                }
                
                // Update position but keep hidden
                animationFrameId = requestAnimationFrame(() => {
                  updateTooltipPosition(e);
                });
                
                // Set timeout to show tooltip when movement stops
                movementTimeout = setTimeout(() => {
                  if (isHovering) {
                    isMoving = false;
                    tooltip.classList.remove('opacity-0');
                    tooltip.classList.add('opacity-100');
                    startTypewriter();
                  }
                }, 150); // Show after 150ms of no movement
              }
            });
            
            // Click handler to navigate to blog
            canvasTrigger.addEventListener('click', function() {
              window.location.href = '/blog';
            });
            
            // Update tooltip position to the right of cursor
            function updateTooltipPosition(e: MouseEvent) {
              const offsetX = 12; // Distance to the right of cursor
              const offsetY = -8; // Slight upward offset
              if (tooltip) {
                tooltip.style.left = (e.clientX + offsetX) + 'px';
                tooltip.style.top = (e.clientY + offsetY) + 'px';
                tooltip.style.transform = 'translate(0, -50%)';
              }
            }
          }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', initializeTooltip);
        
        // Re-initialize after Astro page transitions (reset flag first)
        document.addEventListener('astro:page-load', function() {
          tooltipInitialized = false;
          initializeTooltip();
        });
        
        // Fallback for other navigation scenarios
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeTooltip);
        } else {
          initializeTooltip();
        }
      </script>
    </div>
  </div>
</BaseLayout>