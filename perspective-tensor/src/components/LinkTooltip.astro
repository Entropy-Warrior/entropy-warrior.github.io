---
// Component for link tooltips and previews
---

<style is:global>
  /* External link tooltip styling */
  article a:not([href^="#"]):not(.no-tooltip) {
    position: relative;
    color: rgb(37, 99, 235);
    text-decoration: underline;
    text-decoration-color: rgba(37, 99, 235, 0.3);
    text-underline-offset: 2px;
    transition: all 0.2s;
  }
  
  article a:not([href^="#"]):not(.no-tooltip):hover {
    color: rgb(29, 78, 216);
    text-decoration-color: rgba(29, 78, 216, 0.5);
  }
  
  .dark article a:not([href^="#"]):not(.no-tooltip) {
    color: rgb(96, 165, 250);
    text-decoration-color: rgba(96, 165, 250, 0.3);
  }
  
  .dark article a:not([href^="#"]):not(.no-tooltip):hover {
    color: rgb(147, 197, 253);
    text-decoration-color: rgba(147, 197, 253, 0.5);
  }
  
  /* Link tooltip container */
  .link-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: white;
    border: 1px solid rgb(229, 231, 235);
    border-radius: 0.375rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    max-width: 300px;
    min-width: 200px;
    z-index: 40;
    font-size: 0.75rem;
    line-height: 1.25rem;
    color: rgb(75, 85, 99);
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: all 0.2s;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .dark .link-tooltip {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
    color: rgb(156, 163, 175);
  }
  
  /* Show tooltip on hover */
  .link-with-tooltip:hover .link-tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-2px);
  }
  
  /* Arrow */
  .link-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 4px solid transparent;
    border-top-color: white;
  }
  
  .dark .link-tooltip::after {
    border-top-color: rgb(31, 41, 55);
  }
  
  /* Tooltip content styling */
  .link-tooltip .domain {
    font-weight: 500;
    color: rgb(55, 65, 81);
  }
  
  .dark .link-tooltip .domain {
    color: rgb(209, 213, 219);
  }
  
  .link-tooltip .path {
    color: rgb(107, 114, 128);
    font-size: 0.7rem;
  }
  
  .dark .link-tooltip .path {
    color: rgb(156, 163, 175);
  }
</style>

<script>
  function initializeLinkTooltips() {
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupTooltips);
    } else {
      setupTooltips();
    }
  }

  function setupTooltips() {
    // Find all external links in articles, excluding reference links
    const links = document.querySelectorAll('article a:not([href^="#"]):not(.no-tooltip)');
    
    links.forEach(link => {
      // Skip if already processed
      if (link.classList.contains('link-with-tooltip')) return;
      
      // Skip if this is a reference link (inside sup element)
      if (link.closest('sup')) return;
      
      // Skip if this link is inside a reference popup
      if (link.closest('.ref-popup')) return;
      
      // Skip if this link is inside the footnotes section
      if (link.closest('.footnotes')) return;
      if (link.closest('li[id^="user-content-fn-"]')) return;
      
      const href = link.getAttribute('href');
      if (!href) return;
      
      // Parse URL for display
      let displayText = href;
      let domain = '';
      let path = '';
      
      try {
        const url = new URL(href);
        domain = url.hostname.replace('www.', '');
        path = url.pathname + url.search;
        if (path === '/') path = '';
        if (path.length > 50) {
          path = path.substring(0, 47) + '...';
        }
      } catch {
        // For relative URLs or invalid URLs
        displayText = href;
      }
      
      // Create wrapper span
      const wrapper = document.createElement('span');
      wrapper.className = 'link-with-tooltip';
      wrapper.style.position = 'relative';
      wrapper.style.display = 'inline-block';
      
      // Create tooltip
      const tooltip = document.createElement('div');
      tooltip.className = 'link-tooltip';
      
      if (domain) {
        tooltip.innerHTML = `
          <div class="domain">${domain}</div>
          ${path ? `<div class="path">${path}</div>` : ''}
        `;
      } else {
        tooltip.textContent = displayText;
      }
      
      // Wrap the link
      const parent = link.parentNode;
      if (parent) {
        parent.insertBefore(wrapper, link);
        wrapper.appendChild(link);
        wrapper.appendChild(tooltip);
      }
      
      // Add click tracking
      link.addEventListener('click', () => {
        // Could add analytics here
        console.log('External link clicked:', href);
      });
    });
  }

  // Initialize on page load
  initializeLinkTooltips();

  // Re-initialize on page navigation (for Astro transitions)
  document.addEventListener('astro:page-load', initializeLinkTooltips);
</script>