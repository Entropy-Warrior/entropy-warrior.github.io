---
---
<button 
  id="themeToggle" 
  class="p-2 rounded-md border-0 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
  aria-label="Toggle theme"
>
  <svg 
    width="24" 
    height="24" 
    viewBox="0 0 24 24" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    class="w-5 h-5"
  >
    <!-- Sun icon -->
    <circle 
      cx="12" 
      cy="12" 
      r="5" 
      stroke="currentColor" 
      stroke-width="2" 
      class="sun-icon opacity-100 dark:opacity-0 transition-opacity duration-200"
    />
    <g stroke="currentColor" stroke-width="2" class="sun-icon opacity-100 dark:opacity-0 transition-opacity duration-200">
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </g>
    
    <!-- Moon icon -->
    <path 
      d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" 
      stroke="currentColor" 
      stroke-width="2" 
      fill="none" 
      class="moon-icon opacity-0 dark:opacity-100 transition-opacity duration-200"
    />
  </svg>
</button>

<script is:inline>
  // Initialize theme on page load
  function initTheme() {
    try {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      }
    } catch (e) {
      console.error('Theme initialization error:', e);
    }
  }

  // Toggle theme function
  function toggleTheme(event) {
    try {
      event?.preventDefault();
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      
      if (isDark) {
        html.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        html.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      }
      
      // Force repaint
      html.style.colorScheme = isDark ? 'light' : 'dark';
    } catch (e) {
      console.error('Theme toggle error:', e);
    }
  }

  // Setup event listeners
  function setupThemeToggle() {
    const button = document.getElementById('themeToggle');
    if (button) {
      // Remove existing listeners
      button.removeEventListener('click', toggleTheme);
      // Add new listener
      button.addEventListener('click', toggleTheme);
    }
  }

  // Initialize theme immediately (before DOM is ready)
  initTheme();

  // Setup when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupThemeToggle);
  } else {
    setupThemeToggle();
  }
  
  // Handle Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    initTheme();
    setupThemeToggle();
  });
  
  document.addEventListener('astro:page-load', () => {
    initTheme();
    setupThemeToggle();
  });
</script>
